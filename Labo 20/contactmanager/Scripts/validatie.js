// Dit is dezelfde valideringscode als in de form opgave.// Verwijderde functionaliteit :// - load event listener// - proficiat popupconst valideer = () => {	valideerVoornaam();	valideerFamilienaam();	valideerGeboorteDatum();	valideerEmail();	valideerAantalKinderen();};const valideerVoornaam = () => {	let txtVoornaam = document.getElementById("txtVoornaam");	let voornaam = txtVoornaam.value.trim();	if (voornaam.length > 30) {		reportError(txtVoornaam, "max. 30 karakters");	} else {		clearError(txtVoornaam);	}};const valideerFamilienaam = () => {	let txtFamilienaam = document.getElementById("txtFamilienaam");	let familienaam = txtFamilienaam.value.trim();	if (familienaam.length == 0) {		reportError(txtFamilienaam, "verplicht veld");	} else if (familienaam.length > 50) {		reportError(txtFamilienaam, "max. 50 karakters");	} else {		clearError(txtFamilienaam);	}};const valideerGeboorteDatum = () => {	let txtGeboorteDatum = document.getElementById("txtGeboorteDatum");	let geboorteDatum = txtGeboorteDatum.value.trim();	if (geboorteDatum.length === 0) {		reportError(txtGeboorteDatum, "verplicht veld");		return;	}	if (geboorteDatum.length !== 10) {		reportError(txtGeboorteDatum, "formaat is niet jjjj-mm-dd");		return;	}	if (geboorteDatum.charAt(4) !== '-' || geboorteDatum.charAt(7) !== '-') {		reportError(txtGeboorteDatum, "formaat is niet jjjj-mm-dd");		return;	}	let jaar = parseInt(geboorteDatum.substring(0, 4), 10);	let maand = parseInt(geboorteDatum.substring(5, 7), 10);	let dag = parseInt(geboorteDatum.substring(8, 10), 10);	if (maand < 1 || maand > 12) {		reportError(txtGeboorteDatum, "ongeldige maand");		return;	}	let dagenInMaand;	if (maand === 2) {		dagenInMaand = (jaar % 4 === 0 && (jaar % 100 !== 0 || jaar % 400 === 0)) ? 29 : 28;	} else if (maand === 4 || maand === 6 || maand === 9 || maand === 11) {		dagenInMaand = 30;	} else {		dagenInMaand = 31;	}	if (dag < 1 || dag > dagenInMaand) {		reportError(txtGeboorteDatum, "ongeldige dag");		return;	}	clearError(txtGeboorteDatum);};const valideerEmail = () => {	let txtEmail = document.getElementById("txtEmail");	let email = txtEmail.value.trim();	if (email.length==0) {		reportError(txtEmail, "verplicht veld");	} else {		let formatCorrect=true;		let idx=email.indexOf("@");				if (idx<1 || idx==email.length-1) {			// @ teken komt niet voor, of helemaal vooraan of helemaal achteraan de tekst			formatCorrect=false;		}		idx=email.indexOf("@", idx+1);		if (formatCorrect && idx!=-1) {			// @-teken komt meermaals voor			formatCorrect=false;		}		if (formatCorrect) {			clearError(txtEmail);		} else {			reportError(txtEmail, "geen geldig email adres");		}	}};const valideerAantalKinderen = () => {	let txtAantalKinderen = document.getElementById("txtAantalKinderen");	let aantalKinderenText = txtAantalKinderen.value.trim();	if (aantalKinderenText.length==0) {		reportError(txtAantalKinderen, "verplicht veld");	} else if (!isPositiveNumber(aantalKinderenText)) {		reportError(txtAantalKinderen, "is geen positief getal");	} else {		let aantal=parseInt(aantalKinderenText);		if (aantal>=99) {			reportError(txtAantalKinderen, "te vruchtbaar");		} else {			clearError(txtAantalKinderen);		}	}};const isPositiveNumber = (text) => {	let number=parseInt(text, 10);	return !isNaN(number) && number>=0;	// merk op dat een tekst als "34m" ook aanvaard wordt, wat eigenlijk niet de bedoeling is	// een betere oplossing zou bv. een reguliere expressie gebruiken};const isPositiveNonZeroNumber = (text) => {	let number=parseInt(text, 10);	return !isNaN(number) && number>0;	// merk op dat een tekst als "34m" ook aanvaard wordt, wat eigenlijk niet de bedoeling is	// een betere oplossing zou bv. een reguliere expressie gebruiken};const reportError = (element, message) => {	let elementId=element.getAttribute("id"); // bv. txtVoornaam	let errElementId="err"+elementId.substring(3, elementId.length); // bv. errVoornaam	let errElement=document.getElementById(errElementId);	element.className="invalid";	errElement.innerHTML = message;};const clearError = (element) => {	let elementId=element.getAttribute("id"); // bv. txtVoornaam	let errElementId="err"+elementId.substring(3, elementId.length); // bv. errVoornaam	let errElement=document.getElementById(errElementId);	element.className="";	errElement.innerHTML = "";};const clearAllErrors = () => {	let fieldIds=["txtVoornaam", "txtFamilienaam", "txtGeboorteDatum", "txtEmail", "txtAantalKinderen"];	for (let i=0;i<fieldIds.length;i++) {		clearError( document.getElementById(fieldIds[i]) );	}}